// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.0.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CustomerSearch.Tests.SearchBar
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Search for customers by name")]
    public partial class SearchForCustomersByNameFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SearchForCustomersByName.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Search for customers by name", @"When customers come to our office our staff must be able find them in our system to minimize the effort of our staff as well as the wait for our customers. 
The most common way of doing this is to type in the customers name in the search bar. 
Since this is often done under stressful situations the search should be forgiving when it comes of spelling mistakes.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Given name",
                        "Family name",
                        "Email"});
            table1.AddRow(new string[] {
                        "Anton",
                        "Ericsson",
                        "anton@mail.com"});
            table1.AddRow(new string[] {
                        "Lars-Magnus",
                        "Eriksson",
                        "lm.eriksson@ericsson.se"});
            table1.AddRow(new string[] {
                        "Avantgarde",
                        "Ericzon",
                        "myggan@sticket.se"});
            table1.AddRow(new string[] {
                        "Jonny",
                        "Erixon",
                        "thex@gmail.com"});
#line 7
testRunner.Given("that the following customers exists in the database", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for Ericsson should also find Eriksson")]
        public virtual void SearchForEricssonShouldAlsoFindEriksson()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for Ericsson should also find Eriksson", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 15
testRunner.When("searching for \'Ericsson\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Given name",
                        "Family name",
                        "Email"});
            table2.AddRow(new string[] {
                        "Anton",
                        "Ericsson",
                        "anton@mail.com"});
            table2.AddRow(new string[] {
                        "Lars-Magnus",
                        "Eriksson",
                        "lm.eriksson@ericsson.se"});
#line 16
testRunner.Then("the result includes all these customers", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
